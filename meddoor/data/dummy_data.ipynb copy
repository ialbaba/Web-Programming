{
 "metadata": {
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5-final"
  },
  "orig_nbformat": 2,
  "kernelspec": {
   "name": "python3",
   "display_name": "Python 3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2,
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from datetime import date\n",
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('/Users/Albaba/Library/Mobile Documents/com~apple~CloudDocs/Coding Workplaces/Repos/Web Programming/meddoor/procs.xlsx')\n",
    "df2 = pd.read_excel('/Users/Albaba/Library/Mobile Documents/com~apple~CloudDocs/Coding Workplaces/Repos/Web Programming/meddoor/procs2.xlsx')\n",
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "     CDT                       Description  Standard Value\n",
       "0  D0120                     Periodic Exam           51.46\n",
       "1  D0140                        Emerg Exam           73.03\n",
       "2  D0150                         Comp Exam           82.74\n",
       "3  D0160  Detailed , Ext Exam, Prb Focused          145.35\n",
       "4  D0170                     Re-evaluation           67.67"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>CDT</th>\n      <th>Description</th>\n      <th>Standard Value</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>D0120</td>\n      <td>Periodic Exam</td>\n      <td>51.46</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>D0140</td>\n      <td>Emerg Exam</td>\n      <td>73.03</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>D0150</td>\n      <td>Comp Exam</td>\n      <td>82.74</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>D0160</td>\n      <td>Detailed , Ext Exam, Prb Focused</td>\n      <td>145.35</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>D0170</td>\n      <td>Re-evaluation</td>\n      <td>67.67</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 6
    }
   ],
   "source": [
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "output_type": "execute_result",
     "data": {
      "text/plain": [
       "                                         Procs\n",
       "0                                Periodic Exam\n",
       "1                                   Emerg Exam\n",
       "2                                    Comp Exam\n",
       "3             Detailed , Ext Exam, Prb Focused\n",
       "4                                Re-evaluation\n",
       "5                        Comp perio evaluation\n",
       "6                           X-Rays complete BW\n",
       "7                                X-Rays single\n",
       "8                                  X-Rays Pano\n",
       "9                                 Adult Prophy\n",
       "10                                Child Prophy\n",
       "11                    Amal Filling - 1 surface\n",
       "12                    Amal Filling - 2 surface\n",
       "13                    Amal Filling - 3 surface\n",
       "14                 Amal Filling - 4+ surf, ant\n",
       "15                 Resin Filling - 1 surf, ant\n",
       "16                 Resin Filling - 2 surf, ant\n",
       "17                 Resin Filling - 3 surf, ant\n",
       "18                   Resin Filling - 4 surface\n",
       "19              Crown - resin-based comp (ind)\n",
       "20          Crown - 3/4 resin-based comp (ind)\n",
       "21            Crown - porc / ceramic substrate\n",
       "22          Crown-porc fused to high noble met\n",
       "23              Crown-porc fused to base metal\n",
       "24                 Crown-rull cast noble metal\n",
       "25  Sedative filling (includes amalgam on top)\n",
       "26               Labial veneer (resin lam) lab\n",
       "27                      Root Canal Therapy ant\n",
       "28                       Root Canal Therapy bi\n",
       "29                    Root Canal Therapy molar\n",
       "30                           Perio maintenance\n",
       "31                      Denture complete upper\n",
       "32                      Denture complete lower\n",
       "33                     Denture immediate upper\n",
       "34                     Denture immediate lower"
      ],
      "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Procs</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Periodic Exam</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Emerg Exam</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Comp Exam</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Detailed , Ext Exam, Prb Focused</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Re-evaluation</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>Comp perio evaluation</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>X-Rays complete BW</td>\n    </tr>\n    <tr>\n      <th>7</th>\n      <td>X-Rays single</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>X-Rays Pano</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>Adult Prophy</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>Child Prophy</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>Amal Filling - 1 surface</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>Amal Filling - 2 surface</td>\n    </tr>\n    <tr>\n      <th>13</th>\n      <td>Amal Filling - 3 surface</td>\n    </tr>\n    <tr>\n      <th>14</th>\n      <td>Amal Filling - 4+ surf, ant</td>\n    </tr>\n    <tr>\n      <th>15</th>\n      <td>Resin Filling - 1 surf, ant</td>\n    </tr>\n    <tr>\n      <th>16</th>\n      <td>Resin Filling - 2 surf, ant</td>\n    </tr>\n    <tr>\n      <th>17</th>\n      <td>Resin Filling - 3 surf, ant</td>\n    </tr>\n    <tr>\n      <th>18</th>\n      <td>Resin Filling - 4 surface</td>\n    </tr>\n    <tr>\n      <th>19</th>\n      <td>Crown - resin-based comp (ind)</td>\n    </tr>\n    <tr>\n      <th>20</th>\n      <td>Crown - 3/4 resin-based comp (ind)</td>\n    </tr>\n    <tr>\n      <th>21</th>\n      <td>Crown - porc / ceramic substrate</td>\n    </tr>\n    <tr>\n      <th>22</th>\n      <td>Crown-porc fused to high noble met</td>\n    </tr>\n    <tr>\n      <th>23</th>\n      <td>Crown-porc fused to base metal</td>\n    </tr>\n    <tr>\n      <th>24</th>\n      <td>Crown-rull cast noble metal</td>\n    </tr>\n    <tr>\n      <th>25</th>\n      <td>Sedative filling (includes amalgam on top)</td>\n    </tr>\n    <tr>\n      <th>26</th>\n      <td>Labial veneer (resin lam) lab</td>\n    </tr>\n    <tr>\n      <th>27</th>\n      <td>Root Canal Therapy ant</td>\n    </tr>\n    <tr>\n      <th>28</th>\n      <td>Root Canal Therapy bi</td>\n    </tr>\n    <tr>\n      <th>29</th>\n      <td>Root Canal Therapy molar</td>\n    </tr>\n    <tr>\n      <th>30</th>\n      <td>Perio maintenance</td>\n    </tr>\n    <tr>\n      <th>31</th>\n      <td>Denture complete upper</td>\n    </tr>\n    <tr>\n      <th>32</th>\n      <td>Denture complete lower</td>\n    </tr>\n    <tr>\n      <th>33</th>\n      <td>Denture immediate upper</td>\n    </tr>\n    <tr>\n      <th>34</th>\n      <td>Denture immediate lower</td>\n    </tr>\n  </tbody>\n</table>\n</div>"
     },
     "metadata": {},
     "execution_count": 7
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df3 = pd.merge(df, df2, left_on='Procs', right_on='Description')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from random import random\n",
    "from random import gauss\n",
    "from random import randint\n",
    "df3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "today = date.today()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "def statement(b, p, r, idProcedures, idPlaces, idUsers):\n",
    "    str_ = f\"\"\"INSERT INTO `iba11`.`Bills`\n",
    "        (`billedAmount`,\n",
    "        `patientAmount`,\n",
    "        `rating`,\n",
    "        `idProcedures`,\n",
    "        `idPlaces`,\n",
    "        `idUsers`,\n",
    "        `billDate`,\n",
    "        `entryDate`)\n",
    "        VALUES\n",
    "        ({b},\n",
    "        {p},\n",
    "        {r},\n",
    "        {idProcedures},\n",
    "        {idPlaces},\n",
    "        {idUsers},\n",
    "        \\'{str(date.today())}\\',\n",
    "        \\'{datetime.now()}\\');\"\"\"\n",
    "    return (str_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "text = \"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "for i, row in df3.iterrows():\n",
    "    for j in range (1,15):\n",
    "        billed = (1+random()) * row ['Standard Value']\n",
    "        billed = round(billed*100)/100\n",
    "        patient = gauss(0.3, 0.1) * row ['Standard Value']\n",
    "        rating = round(gauss(3.5, 1))\n",
    "        if rating < 1: rating = 1\n",
    "        elif rating > 5: rating = 5\n",
    "        user = randint(1,5)\n",
    "        place = randint(1,5)\n",
    "        text = text + \"\\n\\n\" + statement(billed, patient, rating, i+1, place, user) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "text_file = open(\"sample.txt\", \"w\")\n",
    "n = text_file.write(text)\n",
    "text_file.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ]
}